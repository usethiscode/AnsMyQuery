{"version":3,"sources":["components/QuesItem.js","components/ListTags.js","components/FrontPage.js","components/RootComponent.js","actions/errorActions.js","actions/types.js","actions/authActions.js","components/auth/registerModal.js","components/auth/LoginModal.js","components/auth/Logout.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/index.js","store.js","components/AppNavbar.js","components/TagsInput.js","components/AddQuestion.js","components/Dashboard.js","components/AnsItem.js","components/Question.js","components/Tag.js","components/ListUsers.js","components/ListQuestionsUsers.js","App.js","serviceWorker.js","index.js"],"names":["QuesItem","question","id","ques","asked_user","title","tags","key","href","className","style","marginBottom","marginLeft","width","map","tag","display","name","getTags_query","gql","ListTags","query","loading","error","data","Spinner","height","console","log","marginTop","Questions_query","FrontPage","textAlign","padding","all_questions","Component","RootComponent","color","returnErrors","msg","status","type","payload","clearErrors","loadUser","dispatch","getState","axios","get","tokenConfig","then","res","catch","err","response","token","auth","config","headers","RegisterModal","state","modal","props","modalstate","password","toggle","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","register","prevProps","this","isAuthenticated","NavLink","onClick","Modal","isOpen","ModalHeader","ModalBody","Alert","Form","FormGroup","Label","for","Input","placeholder","Button","block","connect","body","JSON","stringify","post","LoginModal","user","login","class","aria-label","aria-describedby","Logout","logout","initialState","localStorage","getItem","isLoading","allReducers","combineReducers","action","setItem","removeItem","middleware","thunk","store","createStore","allReducer","compose","applyMiddleware","AppNavbar","authLinks","NavItem","guestLinks","Container","Navbar","dark","expand","fixed","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","TagsInput","React","useState","setTags","closeStyles","lineHeight","index","indexToRemove","filter","_","selectedTags","onKeyUp","event","addTags","options","AddQuestion","selected","alert","document","location","reload","_id","addpost","margin","submitForm","bind","marginRight","onSelectedChanged","overrideStrings","selectSomeItems","getQuestionsQuery","Dashboard","variables","ques_by_userID","withRouter","vote","userid","AnsItem","answer","ans","answered_user","voteCount","getQuestionQuery","getAnswersQuery","Question","ques_id","match","params","qid","ans_by_quesId","length","Tag","ques_by_tag","Divider","users","questions","userID","uid","client","ApolloClient","uri","App","exact","path","component","ListUsers","ListQuestionsUsers","Boolean","window","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d8235cc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function QuesItem({question: { id,ques,asked_user,title,tags }}) {\r\n    return (\r\n        <div key={id}>\r\n            {/* <h4 key={id} style={{ paddingLeft:10}} >{title}</h4>\r\n            <a href={`/question/${id}`}>{ques}</a>  */}\r\n            <a \r\n            href={`/question/${id}`} \r\n            className=\"list-group-item list-group-item-action\"\r\n            style={{ marginBottom:20, marginLeft:20, width:'70%'}}\r\n            >\r\n                <div className=\"d-flex w-100 justify-content-between\">\r\n                <h4 className=\"mb-1\">{title}</h4>\r\n                <small>3 days ago</small>\r\n                </div>\r\n                <p className=\"mb-1\" >{ques}</p>\r\n                <small>Tags : {tags.map(tag => `${tag }, `)}</small>\r\n                <small style={{display:'block'}}>Asked By : {asked_user.name}</small>\r\n            </a>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { Component,Fragment }from 'react'\r\nimport { Spinner } from 'reactstrap';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\n\r\nconst getTags_query = gql`\r\n{\r\n    tags\r\n}\r\n`\r\n\r\nexport default function ListTags() {\r\n    return (\r\n        <div>\r\n            {/* <h1 style={{ padding:10}}>Tags</h1> */}\r\n            <Query query={getTags_query}>\r\n                    {\r\n                        ({ loading, error, data }) =>{\r\n                            if(loading) return(<div>\r\n                                 <Spinner style={{ width: '3rem', height: '3rem' }} /> \r\n                                 <h4>Loading</h4>\r\n                                 </div>\r\n                            )\r\n                            if(error) console.log(error)\r\n                            if(data)\r\n                            return <Fragment>\r\n                                \r\n                                    <div className='container-fluid d-flex justify-content-center b'>\r\n                                    <div className=\"row\">\r\n                                    {\r\n\r\n                                    data.tags.map(tag => (\r\n\r\n                                    <div key={tag} className='col-md-4'>\r\n                                    <div key={tag} className=\"card\" style={{width:'18rem', marginLeft:30,marginBottom:20,marginTop:20}}>\r\n                                        <div className=\"card-body\">\r\n                                            <h5 className=\"card-title\">{tag}</h5>\r\n                                            {/* <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p> */}\r\n                                            <a className=\"btn btn-primary\" href={`/tag/${tag}`}>Browse Questions</a>\r\n                                        </div>\r\n                                    </div>\r\n                                    </div>\r\n                                    ))\r\n\r\n                                    }\r\n                                    </div>\r\n                                    </div>\r\n                                \r\n                            </Fragment>\r\n                        }\r\n                    }\r\n            </Query>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component,Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport QuesItem from './QuesItem';\r\nimport { Spinner } from 'reactstrap';\r\nimport ListTags from './ListTags'\r\n\r\nconst Questions_query = gql`\r\n    {\r\n        all_questions{\r\n            id,\r\n            title,\r\n            ques,\r\n            asked_user{\r\n                name\r\n            },\r\n            tags\r\n        }\r\n    }\r\n`\r\nexport class FrontPage extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n\r\n                <div style={{ marginLeft:40, marginBottom:40 }}>\r\n                <h3>Search Questions by : </h3>\r\n                <a href=\"/tags\">Tags</a>\r\n                <a href=\"/users\" style={{display:'block'}}>Users</a>\r\n                </div>\r\n\r\n                <h4 style={{textAlign:'center'}}>Tags</h4>\r\n                <ListTags />\r\n                \r\n\r\n                <br/>\r\n                <h1 style={{ padding:10}}>Latest Questions</h1>\r\n\r\n                <div className=\"list-group\">\r\n                <Query query={Questions_query}>\r\n                    {\r\n                        ({ loading, error, data }) =>{\r\n                            if(loading) return(<div>\r\n                                 <Spinner style={{ width: '3rem', height: '3rem' }} /> \r\n                                 <h4>Loading</h4>\r\n                                 </div>\r\n                            )\r\n                            if(error) console.log(error)\r\n                            if(data)\r\n                            return <Fragment>\r\n                                {\r\n                                    data.all_questions.map(question => (\r\n                                        <QuesItem key={question.id} question={question}/>\r\n                                    ))\r\n                                }\r\n                            </Fragment>\r\n                        }\r\n                    }\r\n                </Query>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FrontPage\r\n","import React from 'react';\r\nimport FrontPage from './FrontPage';\r\n\r\nfunction RootComponent() {\r\n  return(\r\n        <div>\r\n\r\n          <div className=\"jumbotron bg-yellow-500 p-slope-left\" style={{marginTop:-50}} >\r\n          \r\n          <div style={{marginBottom:50,marginTop:50}}>\r\n          <h1 className=\"display-4\" style={{color:'black'}}>AnsMyQuery</h1>\r\n          <p className=\"lead\" style={{color:'black'}}>We love people who code</p>\r\n          <hr className=\"my-4\"></hr>\r\n          <p className=\"lead\" style={{color:'black'}}>AnsMyQuery is an open community for anyone that codes. We help you get answers to your toughest coding questions, share knowledge with your coworkers in private, and find your next dream job.</p>\r\n          </div>\r\n          {/* <a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Learn more</a>\r\n          <a class=\"btn btn-primary btn-lg\" style={{ marginLeft: 20}} href=\"#\" role=\"button\">Learn more</a> */}\r\n          \r\n          </div>\r\n        <FrontPage />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default RootComponent;\r\n","import { GET_ERRORS, CLEAR_ERRORS } from './types';\r\n\r\n// RETURN ERRORS\r\nexport const returnErrors = (msg, status, id = null) => {\r\n  return {\r\n    type: GET_ERRORS,\r\n    payload: { msg, status, id }\r\n  };\r\n};\r\n\r\n// CLEAR ERRORS\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: CLEAR_ERRORS\r\n  };\r\n};","export const USER_LOADING = \"USER_LOADING\";\r\nexport const USER_LOADED = \"USER_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';","import axios from 'axios';\r\nimport { returnErrors } from './errorActions';\r\n\r\nimport {\r\n  USER_LOADED,\r\n  // USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL\r\n} from './types';\r\n\r\n// Check token & load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  // User loading\r\n  // dispatch({ type: USER_LOADING });\r\n\r\n  axios\r\n    .get('//stackoverflow-server.herokuapp.com/api/auth/user', tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, password }) => dispatch => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // Request body\r\n  const body = JSON.stringify({ name, password });\r\n\r\n  axios\r\n    .post('//stackoverflow-server.herokuapp.com/api/createuser', body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\r\n      );\r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n// Login User\r\nexport const login = ({ name, password }) => dispatch => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // Request body\r\n  const body = JSON.stringify({ name, password });\r\n\r\n  axios\r\n    .post('//stackoverflow-server.herokuapp.com/api/auth', body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL')\r\n      );\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n// Logout User\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS\r\n  };\r\n};\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n  // Get token from localstorage\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // If token, add to headers\r\n  if (token) {\r\n    config.headers['x-auth-token'] = token;\r\n  }\r\n\r\n  return config;\r\n};","import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { register } from '../../actions/authActions';\r\nimport { clearErrors } from '../../actions/errorActions';\r\n\r\nclass RegisterModal extends Component {\r\n  state = {\r\n    modal: false || this.props.modalstate,\r\n    name: '',\r\n    password: '',\r\n    msg: null\r\n  };\r\n\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool,\r\n    error: PropTypes.object.isRequired,\r\n    register: PropTypes.func.isRequired,\r\n    clearErrors: PropTypes.func.isRequired\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { error, isAuthenticated } = this.props;\r\n    if (error !== prevProps.error) {\r\n      // Check for register error\r\n      if (error.id === 'REGISTER_FAIL') {\r\n        this.setState({ msg: error.msg.msg });\r\n      } else {\r\n        this.setState({ msg: null });\r\n      }\r\n    }\r\n\r\n    // If authenticated, close modal\r\n    if (this.state.modal) {\r\n      if (isAuthenticated) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    // Clear errors\r\n    this.props.clearErrors();\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { name, password } = this.state;\r\n\r\n    // Create user object\r\n    const newUser = {\r\n      name,\r\n      password\r\n    };\r\n\r\n    // Attempt to register\r\n    this.props.register(newUser);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n    <NavLink onClick={this.toggle} href='#'>\r\n          Register\r\n        </NavLink>\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Register</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.msg ? (\r\n              <Alert color='danger'>{this.state.msg}</Alert>\r\n            ) : null}\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for='name'>Name</Label>\r\n                <Input\r\n                  type='text'\r\n                  name='name'\r\n                  id='name'\r\n                  placeholder='Name'\r\n                  className='mb-3'\r\n                  onChange={this.onChange}\r\n                />\r\n\r\n                <Label for='password'>Password</Label>\r\n                <Input\r\n                  type='password'\r\n                  name='password'\r\n                  id='password'\r\n                  placeholder='Password'\r\n                  className='mb-3'\r\n                  onChange={this.onChange}\r\n                />\r\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                  Register\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  error: state.error\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { register, clearErrors }\r\n)(RegisterModal);","import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { login } from '../../actions/authActions';\r\nimport { clearErrors } from '../../actions/errorActions';\r\n\r\nclass LoginModal extends Component {\r\n  state = {\r\n    modal: false,\r\n    name: '',\r\n    password: '',\r\n    msg: null\r\n  };\r\n\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool,\r\n    error: PropTypes.object.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    clearErrors: PropTypes.func.isRequired\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { error, isAuthenticated } = this.props;\r\n    if (error !== prevProps.error) {\r\n      // Check for register error\r\n      if (error.id === 'LOGIN_FAIL') {\r\n        this.setState({ msg: error.msg.msg });\r\n      } else {\r\n        this.setState({ msg: null });\r\n      }\r\n    }\r\n\r\n    // If authenticated, close modal\r\n    if (this.state.modal) {\r\n      if (isAuthenticated) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    // Clear errors\r\n    this.props.clearErrors();\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { name, password } = this.state;\r\n\r\n    const user = {\r\n      name,\r\n      password\r\n    };\r\n\r\n    // Attempt to login\r\n    this.props.login(user);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavLink onClick={this.toggle} href='#'>\r\n          Login\r\n        </NavLink>\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Login</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.msg ? (\r\n              <Alert color='danger'>{this.state.msg}</Alert>\r\n            ) : null}\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                {/* <Label for='name'>Name</Label> */}\r\n                <div class=\"input-group mb-3\">\r\n                <div class=\"input-group-prepend\">\r\n                  <span class=\"input-group-text\" id=\"basic-addon1\">@</span>\r\n                </div>\r\n                <input type=\"text\" onChange={this.onChange} name='name' id='name' class=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></input>\r\n                </div>\r\n\r\n\r\n\r\n                <div class=\"input-group mb-3\">\r\n                <div class=\"input-group-prepend\">\r\n                  <span class=\"input-group-text\" id=\"basic-addon1\">***</span>\r\n                </div>\r\n                <input type=\"password\" name='password' id='password' onChange={this.onChange} class=\"form-control\" placeholder=\"Password\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></input>\r\n                </div>\r\n\r\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                  Login\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  error: state.error\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { login, clearErrors }\r\n)(LoginModal);","import React, { Component, Fragment } from 'react';\r\nimport { NavLink } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../actions/authActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Logout extends Component {\r\n  static propTypes = {\r\n    logout: PropTypes.func.isRequired\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <NavLink onClick={this.props.logout} href='#'>\r\n          Logout\r\n        </NavLink>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { logout }\r\n)(Logout);","import {GET_ERRORS, CLEAR_ERRORS } from '../actions/types'\r\n\r\nconst initialState ={\r\n    msg : {},\r\n    status: null,\r\n    id: null\r\n}\r\n\r\nexport default function(state = initialState,action){\r\n    switch(action.type){\r\n        case GET_ERRORS:\r\n            return{\r\n                msg: action.payload.msg,\r\n                status: action.payload.status,\r\n                id: action.payload.id\r\n            }\r\n        case CLEAR_ERRORS:\r\n            return{\r\n                msg:{},\r\n                status:null,\r\n                id:null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n  } from '../actions/types';\r\n  \r\n  const initialState = {\r\n    token: localStorage.getItem('auth-jwt'),\r\n    isAuthenticated: null,\r\n    isLoading: false,\r\n    user: null\r\n  };\r\n  \r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case USER_LOADING:\r\n        return {\r\n          ...state,\r\n          isLoading: true\r\n        };\r\n      case USER_LOADED:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          isLoading: false,\r\n          user: action.payload\r\n        };\r\n      case LOGIN_SUCCESS:\r\n      case REGISTER_SUCCESS:\r\n        localStorage.setItem('auth-jwt', action.payload.token);\r\n        return {\r\n          ...state,\r\n          ...action.payload,\r\n          isAuthenticated: true,\r\n          isLoading: false\r\n        };\r\n      case AUTH_ERROR:\r\n      case LOGIN_FAIL:\r\n      case LOGOUT_SUCCESS:\r\n      case REGISTER_FAIL:\r\n        localStorage.removeItem('auth-jwt');\r\n        return {\r\n          ...state,\r\n          token: null,\r\n          user: null,\r\n          isAuthenticated: false,\r\n          isLoading: false\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }","import errorReducer from './errorReducer';\r\nimport authReducer from './authReducer';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    error: errorReducer,\r\n    auth: authReducer\r\n})\r\n\r\n\r\nexport default allReducers;","import {createStore,applyMiddleware,compose } from 'redux';\r\nimport allReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst initialState={}\r\nconst middleware =[thunk];\r\nconst store = createStore(allReducer, initialState,compose(\r\n    applyMiddleware(...middleware)\r\n    )\r\n);\r\n\r\nexport default store;","import React, { Component, Fragment } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport RegisterModal from './auth/registerModal';\r\nimport LoginModal from './auth/LoginModal';\r\nimport Logout from './auth/Logout';\r\n\r\nimport {loadUser} from '../actions/authActions'\r\nimport store from '../store'\r\n\r\nclass AppNavbar extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  static propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  };\r\n  componentDidMount(){\r\n    store.dispatch(loadUser())\r\n    // const { isAuthenticated, user } = this.props.auth;\r\n    // console.log(store.getState())\r\n}\r\n  render() {\r\n    const { isAuthenticated, user } = this.props.auth;\r\n    // console.log(\"Navbar \"+this.props.auth)\r\n    // console.log(user)\r\n    const authLinks = (\r\n      <Fragment>\r\n        <NavItem>\r\n          <span className='navbar-text mr-3'>\r\n            <strong>{user ? `Welcome ${user.name}` : ''}</strong>\r\n          </span>\r\n        </NavItem>\r\n\r\n        <NavItem>\r\n        <NavLink href='/dashboard'>\r\n                    Dashboard\r\n                </NavLink>\r\n        </NavItem>\r\n\r\n        <NavItem>\r\n          <Logout />\r\n        </NavItem>\r\n\r\n      </Fragment>\r\n    );\r\n\r\n    const guestLinks = (\r\n      <Fragment>\r\n        <NavItem>\r\n          <RegisterModal />\r\n        </NavItem>\r\n        <NavItem>\r\n          <LoginModal />\r\n        </NavItem>\r\n      </Fragment>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Container>\r\n        <Navbar color='dark' dark expand='sm' className='mb-5' fixed='top'>\r\n          <Container>\r\n            <NavbarBrand href='/'>StackUnderflow</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className='ml-auto' navbar>\r\n                {isAuthenticated ? authLinks : guestLinks}\r\n              </Nav>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(AppNavbar);","import React from 'react';\r\n\r\nexport const TagsInput = props => {\r\n\tconst [tags, setTags] = React.useState(props.tags);\r\n\tconst removeTags = indexToRemove => {\r\n        setTags([...tags.filter((_, index) => index !== indexToRemove)]);\r\n        props.selectedTags([...tags.filter((_, index) => index !== indexToRemove)]);\r\n\t};\r\n\tconst addTags = event => {\r\n\t\tif (event.target.value !== \"\") {\r\n\t\t\tsetTags([...tags, event.target.value]);\r\n\t\t\tprops.selectedTags([...tags, event.target.value]);\r\n\t\t\tevent.target.value = \"\";\r\n\t\t}\r\n    };\r\n    const closeStyles = {\r\n        color: \"black\",\r\n        display: \"block\",\r\n        width: 16,\r\n        height: 16,\r\n        lineHeight: 1,\r\n        color: \"#0052cc\",\r\n\t\ttextAlign: \"center\",\r\n\t\tmarginLeft: 15,\r\n        borderRadius: 10,\r\n        fontSize: 14,\r\n        background: \"#fff\",\r\n        cursor: \"pointer\"\r\n    }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ul id=\"tags\">\r\n\t\t\t\t{tags.map((tag, index) => (\r\n\t\t\t\t\t<li key={index} className=\"tag\">\r\n\t\t\t\t\t\t<span className='tag-title'>{tag}</span>\r\n\t\t\t\t\t\t<span className='tag-close-icon' style={closeStyles}\r\n\t\t\t\t\t\t\tonClick={() => removeTags(index)}\r\n\t\t\t\t\t\t>x  \r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\r\n\t\t\t\t<div class=\"form-group\">\r\n                  \r\n\t\t\t\t  <input\r\n\t\t\t\t\t\tstyle={{ width:'50%'}}\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tclass=\"form-control\"\r\n\t\t\t\t\t\tonKeyUp={event => event.key === \"Enter\" ? addTags(event) : null}\r\n\t\t\t\t\t\tplaceholder=\"Enter New Tags here\"\r\n\t\t\t\t\t/>\r\n                \r\n                </div>\r\n\r\n\t\t</div>\r\n\t);\r\n};","import React, { Component,Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {loadUser} from '../actions/authActions'\r\nimport store from '../store'\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MultiSelect from \"@khanacademy/react-multi-select\";\r\nimport gql from 'graphql-tag';\r\nimport {TagsInput} from './TagsInput'\r\nconst getTags_query = gql`\r\n{\r\n    tags\r\n}\r\n`\r\n\r\nvar options = [];\r\n\r\nexport class AddQuestion extends Component {\r\n\r\n\r\n    state={\r\n        ques: \"\",\r\n        title: \"\",\r\n        asked_user: \"\",\r\n        selected: []\r\n    }\r\n   \r\n    static propTypes = {\r\n        auth: PropTypes.object.isRequired\r\n      };\r\n    \r\n    \r\n    componentDidMount(){\r\n        store.dispatch(loadUser())\r\n        // const { isAuthenticated, user } = this.props.auth;\r\n        // console.log(store.getState())\r\n        axios\r\n        .get('//stackoverflow-server.herokuapp.com/graphql?query=%7Btags%7D')\r\n        .then(res => {\r\n          options=res.data.data.tags.map((tag) => ({\"label\":tag,\"value\":tag}))\r\n        })\r\n    }\r\n    submitForm(e){\r\n        e.preventDefault();\r\n        const config = {\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n        };\r\n        \r\n        console.log(this.state.ques,this.state.asked_user)\r\n        const body = JSON.stringify({ ques:this.state.ques, asked_user:this.state.asked_user, title:this.state.title, tags:this.state.selected });\r\n        axios\r\n        .post('//stackoverflow-server.herokuapp.com/api/postquestion',body,config)\r\n        .then(res => {console.log('Question Posted'); alert('Question posted');document.location.reload(true);console.log(this.state)})\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    selectedTags(tags){\r\n      this.state.selected = [...this.state.selected,...tags]\r\n    };\r\n\r\n    render() {\r\n        // if(localStorage.getItem('auth-jwt') !== \"null\" && localStorage.getItem('auth-jwt') !== \"undefined\") this.props.dispatch(login())\r\n        // if(this.props.auth==='logged_in'){\r\n        // store.dispatch(loadUser())\r\n        // console.log(store.getState())\r\n       const {selected} = this.state\r\n       const { isAuthenticated, user } = this.props.auth;\r\n       this.state.asked_user = user ? user._id : ''\r\n       const addpost = (\r\n            <Fragment>\r\n                \r\n            <div style={{margin:50}}>\r\n            <h4>Add a new Question</h4>\r\n            <form onSubmit = {this.submitForm.bind(this) }>\r\n                <div class=\"form-group\">\r\n                  <label for=\"exampleInputEmail1\">Title</label>\r\n                  <input style={{ width:'50%'}} type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"titleHelp\" onChange={ (e) => this.setState( { title : e.target.value }) }/>\r\n                  <small id=\"titleHelp\" class=\"form-text text-muted\">A short description of the question</small>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <label for=\"exampleInputPassword1\">Question</label>\r\n                  <input style={{ width:'50%'}} type=\"text\" class=\"form-control\" id=\"exampleInputPassword1\" aria-describedby=\"quesHelp\" onChange={ (e) => this.setState( { ques : e.target.value }) }/>\r\n                  <small id=\"quesHelp\" class=\"form-text text-muted\">Detailed Question</small>\r\n                </div>\r\n                \r\n              <div style={{marginRight:'50%',marginTop:40,marginBottom:40}}>\r\n              <MultiSelect\r\n                options={options}\r\n                selected={selected}\r\n                onSelectedChanged={selected => this.setState({selected})}\r\n                overrideStrings={{\r\n                selectSomeItems: \"Select Tags\"}} />\r\n                </div>\r\n                <label for=\"exampleInputPassword1\">Tags</label>\r\n                <TagsInput selectedTags={this.selectedTags.bind(this)}  tags={[]}/>\r\n\r\n                <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n              </form>\r\n            </div>     \r\n        \r\n\r\n        </Fragment>\r\n       )\r\n\r\n       const guestLinks = (\r\n        <Fragment>\r\n          <h4>Not Logged in. Please login</h4>\r\n        </Fragment>\r\n      );\r\n\r\n\r\n        return (\r\n      <div>\r\n                {isAuthenticated ? addpost : guestLinks}\r\n      </div>\r\n    );\r\n            // }else{\r\n            //     return(\r\n            //         <div>\r\n            //             Log in to Add Questions\r\n            //             <a href='/login'>Log in</a>\r\n            //             <a href='/register'>Register</a>\r\n            //         </div>\r\n            //     )\r\n            // }\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\nauth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(AddQuestion)\r\n// export default graphql(getUsersQuery)(AddQuestion)\r\n\r\n","import React, { Component,Fragment } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom'\r\nimport {loadUser} from '../actions/authActions'\r\nimport store from '../store'\r\nimport AddQuestion from './AddQuestion'\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport QuesItem from './QuesItem';\r\nconst getQuestionsQuery = gql`\r\nquery getQuestion($id: ID!){\r\n        ques_by_userID(id: $id){\r\n        id,\r\n        title,\r\n        asked_user{\r\n            name\r\n        },\r\n        ques,\r\n        tags\r\n    }\r\n}\r\n`\r\nexport class Dashboard extends Component {\r\n    componentDidMount(){\r\n        store.dispatch(loadUser())\r\n        // const { isAuthenticated, user } = this.props.auth;\r\n        // console.log(store.getState())\r\n    }\r\n    static propTypes = {\r\n        auth: PropTypes.object.isRequired\r\n        }\r\n    \r\n    render() {\r\n        const { isAuthenticated,user } = this.props.auth;\r\n        if(isAuthenticated===null)\r\n            return <h4>Please wait...</h4>\r\n        if(user)\r\n        return (\r\n            <div>\r\n                <h4 style={{marginLeft:20}}><strong>{user ? `Welcome ${user.name}` : ''}</strong></h4>\r\n                \r\n                <h4 style={{marginLeft:20,marginTop:30}}>Your Questions : </h4>\r\n                {\r\n                    user._id?(null):( document.location.reload(true) )\r\n                }\r\n                {\r\n                user._id?(<Query query={getQuestionsQuery} variables={ {id: user._id}}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) return <h4>loading...</h4>\r\n                        if (error) return console.log(error);\r\n                        if (data) console.log(data)\r\n                        return (<Fragment>\r\n                            {\r\n                                data.ques_by_userID.map(question => (\r\n                                    <QuesItem key={question.id} question={question}/>\r\n                                ))\r\n                            }\r\n                        </Fragment>\r\n                        );\r\n                    }}\r\n                </Query>):(null)\r\n                }\r\n                <AddQuestion />\r\n            </div>\r\n        )\r\n        else\r\n        return(\r\n            <div>\r\n                <h4>Please login to Continue</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n  });\r\n  \r\n  export default withRouter(connect(\r\n    mapStateToProps,\r\n    null\r\n  )(Dashboard))\r\n","import React,{Component} from 'react'\r\nimport axios from 'axios';\r\nfunction vote(id,userid,type){\r\n    const body = JSON.stringify({ id:id, type:type,user:userid });\r\n    const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n    };\r\n    console.log(body)\r\n        axios\r\n        .post('//stackoverflow-server.herokuapp.com/api/vote',body,config)\r\n        .then(res => {console.log(res);alert('Voted!')})\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport default function AnsItem(props) {\r\n    const { id,ans,answered_user,voteCount } = props.answer\r\n    return (\r\n        <div>\r\n        <hr class=\"my-4\"></hr>\r\n        {/* <h4> {ans} by: {answered_user.name}</h4> */}\r\n        <span style={{marginLeft:20}}>{voteCount}</span>\r\n\r\n        <h5 style={{margin:50,marginTop:10}}>{ans}</h5>\r\n        <p class=\"lead\" style={{marginTop:50,marginLeft:50}}>Answered by: {answered_user.name}</p>\r\n        \r\n        { (props.userid)?\r\n            (\r\n            <div>\r\n            {/* <h4 style={{marginLeft:50}}>Userid : {props.userid}</h4> */}\r\n            <button style={{marginLeft:50}} class=\"btn btn-outline-success\" onClick={ ()=> vote(id,props.userid,'up') }>Upvote</button>\r\n            <button style={{marginLeft:25}} class=\"btn btn-outline-danger\" onClick={ ()=> vote(id,props.userid,'down')}>Downvote</button>\r\n            </div>\r\n            )\r\n            :(<h4 style={{marginLeft:50}}>Login to vote</h4>)\r\n        }\r\n        <hr class=\"my-4\"></hr>\r\n        </div>\r\n    )\r\n}\r\n ","import React, { Component,Fragment } from 'react'\r\nimport { Query } from 'react-apollo'\r\nimport {gql} from 'apollo-boost';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {loadUser} from '../actions/authActions'\r\nimport store from '../store'\r\nimport axios from 'axios';\r\nimport AnsItem from './AnsItem';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst getQuestionQuery = gql`\r\nquery getQuestion($id: ID!){\r\n        question(id: $id){\r\n        ques,\r\n        title,\r\n        asked_user{\r\n            name\r\n        },\r\n        tags\r\n    }\r\n}\r\n`\r\n\r\nconst getAnswersQuery= gql`\r\nquery getAnswers($id: ID!){\r\n    ans_by_quesId(id: $id){\r\n        id,\r\n        ans,\r\n        voteCount,\r\n        answered_user{\r\n            name\r\n        }\r\n    }\r\n}\r\n`\r\n\r\nexport class Question extends Component {\r\n    state={\r\n        ans: \"\",\r\n        answered_user: \"\",\r\n        ques_id: \"\",\r\n    }\r\n    \r\n    static propTypes = {\r\n        auth: PropTypes.object.isRequired\r\n      };\r\n\r\n    componentDidMount(){\r\n        store.dispatch(loadUser())\r\n    }\r\n    submitForm(e){\r\n        e.preventDefault();\r\n        const config = {\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n        };\r\n        \r\n        console.log(this.state.ans,this.state.answered_user,this.state.ques_id)\r\n        const body = JSON.stringify({ ans:this.state.ans, answered_user:this.state.answered_user, ques_id:this.state.ques_id });\r\n        axios\r\n        .post('//stackoverflow-server.herokuapp.com/api/postanswer',body,config)\r\n        .then(res => {console.log('Question Posted');document.location.reload(true)})\r\n        .catch(err => console.log(err))\r\n        this.state.ans=e.target.value=\"\"\r\n    }\r\n    render() {\r\n       const { isAuthenticated, user } = this.props.auth;\r\n       this.state.answered_user = user ? user._id : ''\r\n        return (\r\n            <div>\r\n                <Query query={getQuestionQuery} variables={ {id: this.props.match.params.qid}}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) return null;\r\n                        if (error) return `Error! ${error}`;\r\n                        if (data) this.state.ques_id=this.props.match.params.qid\r\n                        return (\r\n\r\n                        <div class=\"jumbotron jumbotron-fluid\">\r\n                            <div class=\"container\" style={{marginLeft:30}}>\r\n                                <h1 class=\"display-4\">{data.question.title}</h1>\r\n                                <p>{data.question.ques}</p>\r\n                                <hr class=\"my-4\"></hr>\r\n                                \r\n                                <p class=\"lead\">Tags: {data.question.tags.map(tag => `${tag }, `)}</p>\r\n                                <p class=\"lead\">Asked by: {data.question.asked_user.name}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        );\r\n                    }}\r\n                </Query>\r\n                \r\n\r\n               \r\n                <h4 style={{ marginLeft:70,marginBottom:70 }}> Answers </h4>\r\n                <Query query={getAnswersQuery} variables={ {id: this.props.match.params.qid}}>\r\n                    {\r\n                        ({ loading, error, data }) =>{\r\n                            if(loading) return <h4>loading</h4>\r\n                            if(error) console.log(error)\r\n                            if(data.ans_by_quesId.length!=0)\r\n                            return (\r\n                            <Fragment>\r\n                                {\r\n                                    (isAuthenticated)?(\r\n                                    data.ans_by_quesId.map(answer => (\r\n                                        <AnsItem key={answer.id} answer={answer} userid={user._id}/>\r\n                                    // <h4>{ answer.ans }</h4>\r\n                                    ))\r\n                                    ):\r\n                                    (\r\n                                        data.ans_by_quesId.map(answer => (\r\n                                            <AnsItem key={answer.id} answer={answer}/>\r\n                                        // <h4>{ answer.ans }</h4>\r\n                                        ))\r\n                                    )\r\n                                }\r\n                            </Fragment>\r\n                           )\r\n                           else\r\n                           return <h3 style={{margin:50}}>No answers yet :(</h3>\r\n                        }\r\n                    }\r\n                </Query>\r\n\r\n\r\n\r\n                {\r\n                (isAuthenticated)?(\r\n                <div className='form-group' style={{margin:50}}>\r\n                <form onSubmit = {this.submitForm.bind(this) }>\r\n\r\n                    <h4>Post an Answer!</h4>\r\n                    <textarea style={{width:'50%'}} class='form-control' onChange={ (e) => this.setState( { ans : e.target.value }) }/>\r\n                    <button style={{marginTop:20}}type=\"submit\" class=\"btn btn-primary\">Post Answer</button>\r\n                </form>\r\n                </div>\r\n                ):(<h4 style={{margin:50}}>Please Login to Post Anwers</h4>)\r\n                }\r\n                {/* <Form onSubmit={this.submitForm.bind(this) }>\r\n                    <FormGroup>\r\n                        <Label for=\"Answer\">Email</Label>\r\n                        <Input type=\"text\" placeholder=\"Enter Answer\" onChange={ (e) => this.setState( { ans : e.target.value }) }/>\r\n                    </FormGroup>\r\n                    <Button>Submit</Button>\r\n                </Form>\r\n             */}\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n    });\r\n    \r\n    export default connect(mapStateToProps)(Question)\r\n","import React, { Component,Fragment } from 'react'\r\nimport { Query } from 'react-apollo'\r\nimport {gql} from 'apollo-boost';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport QuesItem from './QuesItem'\r\nimport { Spinner } from 'reactstrap';\r\nconst getQuestionQuery = gql`\r\nquery getQuestionByTag($id: String!){\r\n        ques_by_tag(tag: $id){\r\n        ques,\r\n        id,\r\n        title,\r\n        asked_user{\r\n            name\r\n        },\r\n        tags\r\n    }\r\n}\r\n`\r\nexport class Tag extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Query query={getQuestionQuery} variables={ {id: this.props.match.params.qid}}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) return(\r\n                            <div style={{ margin:50}}>\r\n                            <Spinner style={{ width: '3rem', height: '3rem' }} /> \r\n                            <h4>Loading...</h4>\r\n                            </div>\r\n                       )\r\n                        if (error) return `Error! ${error}`;\r\n                        if (data) console.log(data)\r\n                        return (<Fragment>\r\n                            {\r\n                                data.ques_by_tag.map(question => (\r\n                                    <QuesItem key={question.id} question={question}/>\r\n                                ))\r\n                            }\r\n                        </Fragment>\r\n                        );\r\n                    }}\r\n                </Query>\r\n                \r\n\r\n                <Divider />\r\n\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Tag\r\n","import React, { Component,Fragment }from 'react'\r\nimport { Spinner } from 'reactstrap';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\n\r\nconst getTags_query = gql`\r\n{\r\n    users{\r\n        name,\r\n        id,\r\n        questions{\r\n            id,\r\n            tags\r\n        }\r\n    }\r\n}\r\n`\r\n\r\nexport default function ListTags() {\r\n    return (\r\n        <div>\r\n            {/* <h1 style={{ padding:10}}>Tags</h1> */}\r\n            <Query query={getTags_query}>\r\n                    {\r\n                        ({ loading, error, data }) =>{\r\n                            if(loading) return(\r\n                            <div style={{ margin:100 }}>\r\n                                 <Spinner style={{ width: '3rem', height: '3rem' }} /> \r\n                                 <h4>Loading...</h4>\r\n                                 </div>\r\n                            )\r\n                            if(error) console.log(error)\r\n                            if(data) console.log(data)\r\n                            return <Fragment>\r\n                                \r\n                                    <div className='container-fluid d-flex justify-content-center b'>\r\n                                    <div className=\"row\">\r\n                                    {\r\n\r\n                                    data.users.map(tag => (\r\n\r\n                                    <div key={tag} className='col-md-4'>\r\n                                    <div key={tag} className=\"card\" style={{width:'18rem', marginLeft:30,marginBottom:20,marginTop:20}}>\r\n                                        <div className=\"card-body\">\r\n                                            <h5 className=\"card-title\">{tag.name}</h5>\r\n                                            <p className=\"card-text\">Questions : {tag.questions.length}</p>\r\n                                            <a className=\"btn btn-primary\" href={`/userquestions/${tag.id}`}>Browse Questions</a>\r\n                                        </div>\r\n                                    </div>\r\n                                    </div>\r\n                                    ))\r\n\r\n                                    }\r\n                                    </div>\r\n                                    </div>\r\n                                \r\n                            </Fragment>\r\n                        }\r\n                    }\r\n            </Query>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component,Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport QuesItem from './QuesItem';\r\nimport { Spinner } from 'reactstrap';\r\nimport ListTags from './ListTags'\r\n\r\nconst Questions_query = gql`\r\nquery GETQuestions($userID : ID!){\r\n    user(id: $userID){\r\n      questions{\r\n        id,\r\n        ques,\r\n        asked_user{\r\n            name\r\n        },\r\n        tags\r\n      }\r\n    }\r\n  }\r\n`\r\nexport class FrontPage extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n\r\n                <div className=\"list-group\">\r\n                <Query query={Questions_query} variables={ {userID: this.props.match.params.uid}}>\r\n                    {\r\n                        ({ loading, error, data }) =>{\r\n                            if(loading) return(<div>\r\n                                 <Spinner style={{ width: '3rem', height: '3rem' }} /> \r\n                                 <h4>Loading</h4>\r\n                                 </div>\r\n                            )\r\n                            if(error) console.log(error)\r\n                            if(data.user.questions.length !=0 )\r\n                            return <Fragment>\r\n                                {\r\n                                    data.user.questions.map(question => (\r\n                                        <QuesItem key={question.id} question={question}/>\r\n                                    ))\r\n                                }\r\n                            </Fragment>\r\n                            else\r\n                            return(<h4>No questions</h4>)\r\n                        }\r\n                    }\r\n                </Query>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FrontPage\r\n","import React from 'react';\nimport RootComponent from './components/RootComponent';\nimport AppNavbar from './components/AppNavbar'\nimport {Provider} from 'react-redux'\nimport store from './store';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {BrowserRouter,Route} from 'react-router-dom';\nimport Dashboard from './components/Dashboard'\nimport Question from './components/Question'\nimport Tag from './components/Tag'\nimport ListTags from './components/ListTags'\nimport ListUsers from './components/ListUsers'\nimport ListQuestionsUsers from './components/ListQuestionsUsers'\n\n\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider } from 'react-apollo';\nconst client = new ApolloClient({\n  uri:'http://stackoverflow-server.herokuapp.com/graphql'\n})\n\nfunction App() {\n  \n  return (\n    <ApolloProvider client={client}>\n    <Provider store={store}>\n      <BrowserRouter>\n        <div className='container'>\n          <AppNavbar />\n          <h1 className='belownav'></h1>\n        </div>\n        <Route exact path=\"/\" component={RootComponent} />\n        <Route exact path=\"/dashboard\" component={Dashboard} /> \n        <Route path=\"/question/:qid\" component={Question} />\n        <Route path=\"/tag/:qid\" component={Tag} />\n        <Route path=\"/tags\" component={ListTags} />\n        <Route path=\"/users\" component={ListUsers} />\n        <Route path=\"/userquestions/:uid\" component={ListQuestionsUsers} />\n      \n      </BrowserRouter>\n    </Provider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n<App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}